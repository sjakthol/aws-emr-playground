AWSTemplateFormatVersion: 2010-09-09
Description: Amazon EMR - Parametrized state machine for EMR workflow
Transform: AWS::Serverless-2016-10-31

Parameters:
  DeploymentName:
    Description: Name of this EMR deployment (to isolate multiple deployments)
    Type: String

Resources:

## Sample input (yaml)

# Id: job1
#
# ClusterConfiguration:
#   CoreFleetInstanceTypeConfigs:
#   - { InstanceType: c5.xlarge }
#   - { InstanceType: c5a.xlarge }
#   - { InstanceType: c5d.xlarge }
#   - { InstanceType: m5.xlarge }
#   - { InstanceType: r5.xlarge }
#   - { InstanceType: r5d.xlarge }
#
#   CoreFleetOnDemandCapacity: 0
#   CoreFleetSpotCapacity: 1
#
#   MasterFleetInstanceTypeConfigs:
#   - { InstanceType: c5.xlarge }
#   - { InstanceType: c5a.xlarge }
#   - { InstanceType: c5d.xlarge }
#   - { InstanceType: m5.xlarge }
#   - { InstanceType: r5.xlarge }
#   - { InstanceType: r5d.xlarge }
#
#   MasterFleetOnDemandCapacity: 0
#   MasterFleetSpotCapacity: 1
#
#   ReleaseLabel: emr-6.4.0
#
# Steps:
#   -
#     Name: Step1
#     Command: ['true']
#   - Name: Step2
#     Command: ['true']

## Sample Input (json)
# {
#   "Id": "job1",
#   "ClusterConfiguration": {
#     "CoreFleetInstanceTypeConfigs": [
#       {
#         "InstanceType": "c5.xlarge"
#       },
#       {
#         "InstanceType": "c5a.xlarge"
#       },
#       {
#         "InstanceType": "c5d.xlarge"
#       },
#       {
#         "InstanceType": "m5.xlarge"
#       },
#       {
#         "InstanceType": "r5.xlarge"
#       },
#       {
#         "InstanceType": "r5d.xlarge"
#       }
#     ],
#     "CoreFleetOnDemandCapacity": 0,
#     "CoreFleetSpotCapacity": 1,
#     "MasterFleetInstanceTypeConfigs": [
#       {
#         "InstanceType": "c5.xlarge"
#       },
#       {
#         "InstanceType": "c5a.xlarge"
#       },
#       {
#         "InstanceType": "c5d.xlarge"
#       },
#       {
#         "InstanceType": "m5.xlarge"
#       },
#       {
#         "InstanceType": "r5.xlarge"
#       },
#       {
#         "InstanceType": "r5d.xlarge"
#       }
#     ],
#     "MasterFleetOnDemandCapacity": 0,
#     "MasterFleetSpotCapacity": 1,
#     "ReleaseLabel": "emr-6.4.0"
#   },
#   "Steps": [
#     {
#       "Name": "Step1",
#       "Command": [
#         "true"
#       ]
#     },
#     {
#       "Name": "Step2",
#       "Command": [
#         "true"
#       ]
#     }
#   ]
# }

  Workflow:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: !Sub ${AWS::StackName}
      Policies:
        - Fn::ImportValue: !Sub ${DeploymentName}-infra-workflow-EmrWorkflowRunnerPolicyArn
      Definition:
        Comment: !Sub Parametrized state machine for EMR workflow (${DeploymentName})
        StartAt: CreateCluster
        States:
          CreateCluster:
            Type: Task
            Resource: arn:aws:states:::elasticmapreduce:createCluster.sync
            ResultPath: $.Cluster
            Parameters:
              Applications:
                - Name: Spark
              Instances:
                Ec2SubnetIds:
                  - !ImportValue infra-vpc-sn-public-a
                  - !ImportValue infra-vpc-sn-public-b
                KeepJobFlowAliveWhenNoSteps: true
                InstanceFleets:
                  - InstanceFleetType: MASTER
                    Name: Master
                    InstanceTypeConfigs.$: $$.Execution.Input.ClusterConfiguration.MasterFleetInstanceTypeConfigs
                    LaunchSpecifications:
                      OnDemandSpecification:
                        AllocationStrategy: lowest-price
                      SpotSpecification:
                        AllocationStrategy: capacity-optimized
                        TimeoutAction: TERMINATE_CLUSTER
                        TimeoutDurationMinutes: 30
                    TargetOnDemandCapacity.$: $$.Execution.Input.ClusterConfiguration.MasterFleetOnDemandCapacity
                    TargetSpotCapacity.$: $$.Execution.Input.ClusterConfiguration.MasterFleetSpotCapacity
                  - InstanceFleetType: CORE
                    Name: Core
                    InstanceTypeConfigs.$: $$.Execution.Input.ClusterConfiguration.CoreFleetInstanceTypeConfigs
                    LaunchSpecifications:
                      OnDemandSpecification:
                        AllocationStrategy: lowest-price
                      SpotSpecification:
                        AllocationStrategy: capacity-optimized
                        TimeoutAction: TERMINATE_CLUSTER
                        TimeoutDurationMinutes: 30
                    TargetOnDemandCapacity.$: $$.Execution.Input.ClusterConfiguration.CoreFleetOnDemandCapacity
                    TargetSpotCapacity.$: $$.Execution.Input.ClusterConfiguration.CoreFleetSpotCapacity
                EmrManagedMasterSecurityGroup:
                  Fn::ImportValue: !Sub ${DeploymentName}-infra-emr-MasterSecurityGroup
                EmrManagedSlaveSecurityGroup:
                  Fn::ImportValue: !Sub ${DeploymentName}-infra-emr-WorkerSecurityGroup
              JobFlowRole:
                Fn::ImportValue: !Sub ${DeploymentName}-infra-emr-EmrInstanceRoleProfile
              LogUri:
                Fn::Sub:
                  - "s3://${Bucket}/${DeploymentName}/emr/"
                  - { Bucket: !ImportValue "infra-buckets-LogBucket" }
              Name.$: !Sub States.Format('${AWS::StackName}-{}-{}', $$.Execution.Input.Id, $$.Execution.Name)
              ReleaseLabel.$: $$.Execution.Input.ClusterConfiguration.ReleaseLabel
              ServiceRole:
                Fn::ImportValue: !Sub ${DeploymentName}-infra-emr-EmrServiceRole
              Tags:
                - { Key: DeploymentName, Value: !Ref DeploymentName }
                - { Key: Name, Value.$: !Sub "States.Format('${AWS::StackName}-{}-{}', $$.Execution.Input.Id, $$.Execution.Name)" }
              VisibleToAllUsers: true
            Next: RunSteps
          RunSteps:
            Type: Map
            MaxConcurrency: 1 # to run steps in order
            ItemsPath: $.Steps
            ResultPath: $.results
            Parameters:
              Cluster.$: $.Cluster
              Step.$: $$.Map.Item.Value
            Iterator:
              StartAt: AddStep
              States:
                AddStep:
                  Type: Task
                  Resource: arn:aws:states:::elasticmapreduce:addStep.sync
                  Parameters:
                    ClusterId.$: $.Cluster.ClusterId
                    Step:
                      Name.$: $.Step.Name
                      ActionOnFailure: CONTINUE
                      HadoopJarStep:
                        Jar: command-runner.jar
                        Args.$: $.Step.Command
                  End: true
            Next: TerminateCluster
            Catch:
              - ErrorEquals:
                  - States.ALL
                ResultPath: $.error
                Next: TerminateClusterFailure
          TerminateCluster:
            Type: Task
            Resource: arn:aws:states:::elasticmapreduce:terminateCluster.sync
            Parameters:
              ClusterId.$: $.Cluster.ClusterId
            End: true
          TerminateClusterFailure:
            Type: Task
            Resource: arn:aws:states:::elasticmapreduce:terminateCluster.sync
            Parameters:
              ClusterId.$: $.Cluster.ClusterId
            Next: Fail
          Fail:
            Type: Fail
