AWSTemplateFormatVersion: 2010-09-09
Description: Amazon EMR - Common infrastructure (buckets, roles, SGs)

Parameters:
  DeploymentName:
    Description: Name of this EMR deployment (to isolate multiple deployments)
    Type: String

Resources:
  BootstrapBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketName: !Sub "${AWS::StackName}-bootstrap"
      LifecycleConfiguration:
        Rules:
          - Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7
          - Status: Enabled
            NoncurrentVersionExpirationInDays: 7
      LoggingConfiguration:
        DestinationBucketName: !ImportValue infra-buckets-LogBucket
        LogFilePrefix: !Sub s3_access/bucket=${AWS::StackName}-bootstrap/
      Tags:
        - { Key: Name, Value: !Sub "${AWS::StackName}-bootstrap" }
      VersioningConfiguration:
        Status: Enabled

  NotebookBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketName: !Sub "${AWS::StackName}-notebooks"
      LifecycleConfiguration:
        Rules:
          - Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7
          - Status: Enabled
            NoncurrentVersionExpirationInDays: 7
      LoggingConfiguration:
        DestinationBucketName: !ImportValue infra-buckets-LogBucket
        LogFilePrefix: !Sub s3_access/bucket=${AWS::StackName}-notebooks/
      Tags:
        - { Key: Name, Value: !Sub "${AWS::StackName}-notebooks" }
      VersioningConfiguration:
        Status: Enabled

  WorkspaceBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketName: !Sub "${AWS::StackName}-workspace"
      LifecycleConfiguration:
        Rules:
          - Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7
          - Status: Enabled
            NoncurrentVersionExpirationInDays: 7
      LoggingConfiguration:
        DestinationBucketName: !ImportValue infra-buckets-LogBucket
        LogFilePrefix: !Sub s3_access/bucket=${AWS::StackName}-workspace/
      Tags:
        - { Key: Name, Value: !Sub "${AWS::StackName}-workspace" }
      VersioningConfiguration:
        Status: Enabled

  EmrInstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Path: /
      RoleName: !Sub ${AWS::StackName}-EmrInstanceRole
      Policies:
        - PolicyName: EmrBasicAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:DeleteObject
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:PutObject
                Resource:
                  - !Sub arn:aws:s3:::${AWS::StackName}-bootstrap
                  - !Sub arn:aws:s3:::${AWS::StackName}-bootstrap/*
                  - !Sub arn:aws:s3:::${AWS::StackName}-notebooks
                  - !Sub arn:aws:s3:::${AWS::StackName}-notebooks/*
                  - !Sub arn:aws:s3:::${AWS::StackName}-workspace
                  - !Sub arn:aws:s3:::${AWS::StackName}-workspace/*
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource:
                  - Fn::Sub:
                      - "arn:aws:s3:::${Bucket}/${DeploymentName}/emr/*"
                      - { Bucket: !ImportValue "infra-buckets-LogBucket" }
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Resource:
                  - !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${DeploymentName}/pyspark-runtime

  EmrInstanceRoleProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles:
        - !Ref EmrInstanceRole

  EmrServiceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: elasticmapreduce.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceRole
      Path: /
      RoleName: !Sub ${AWS::StackName}-EmrServiceRole

  MasterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${AWS::StackName}-master-sg
      GroupDescription: !Sub EMR master node security group for ${DeploymentName} clusters
      Tags:
        - { Key: Name, Value: !Sub "${AWS::StackName}-MasterSecurityGroup" }
      VpcId: !ImportValue infra-vpc-VpcId

  WorkerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${AWS::StackName}-WorkerSecurityGroup
      GroupDescription: !Sub EMR worker node security group for ${DeploymentName} clusters
      Tags:
        - { Key: Name, Value: !Sub "${AWS::StackName}-WorkerSecurityGroup" }
      VpcId: !ImportValue infra-vpc-VpcId

  ServiceAccessSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${AWS::StackName}-ServiceAccessSecurityGroup
      GroupDescription: !Sub EMR service access security group for ${DeploymentName} clusters
      Tags:
        - { Key: Name, Value: !Sub "${AWS::StackName}-ServiceAccessSecurityGroup" }
      VpcId: !ImportValue infra-vpc-VpcId

  PysparkRuntimeImage:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub "${DeploymentName}/pyspark-runtime"
      Tags:
        - { Key: Name, Value: !Sub "${DeploymentName}/pyspark-runtime" }

Outputs:
  EmrInstanceRole:
    Description: The ARN of the IAM role to use for the EMR cluster instances.
    Value: !GetAtt EmrInstanceRoleProfile.Arn
    Export:
      Name: !Sub "${AWS::StackName}-EmrInstanceRole"

  EmrServiceRole:
    Description: The ARN of the IAM role to use for the EMR service.
    Value: !GetAtt EmrServiceRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-EmrServiceRole"

  BootstrapBucket:
    Description: Name of the bucket used for EMR bootstrap action scripts.
    Value: !Ref BootstrapBucket
    Export:
      Name: !Sub "${AWS::StackName}-BootstrapBucket"

  NotebookBucket:
    Description: Name of the bucket used to store Jupyter / Zeppelin notebooks.
    Value: !Ref NotebookBucket
    Export:
      Name: !Sub "${AWS::StackName}-NotebookBucket"

  WorkspaceBucket:
    Description: Name of the bucket used to store (temporary) datasets
    Value: !Ref WorkspaceBucket
    Export:
      Name: !Sub "${AWS::StackName}-WorkspaceBucket"

  MasterSecurityGroup:
    Description: EMR Managed Security Group for Master Nodes
    Value: !GetAtt MasterSecurityGroup.GroupId
    Export:
      Name: !Sub "${AWS::StackName}-MasterSecurityGroup"

  WorkerSecurityGroup:
    Description: EMR Managed Security Group for Worker Nodes
    Value: !GetAtt WorkerSecurityGroup.GroupId
    Export:
      Name: !Sub "${AWS::StackName}-WorkerSecurityGroup"

  ServiceAccessSecurityGroup:
    Description: EMR Managed Security Group for Service Access
    Value: !GetAtt ServiceAccessSecurityGroup.GroupId
    Export:
      Name: !Sub "${AWS::StackName}-ServiceAccessSecurityGroup"
