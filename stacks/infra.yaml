AWSTemplateFormatVersion: 2010-09-09
Description: Amazon EMR - Common infrastructure (buckets, roles, SGs)

Parameters:
  DeploymentName:
    Description: Name of this EMR deployment (to isolate multiple deployments)
    Type: String

Resources:
  BootstrapBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketName: !Sub "${AWS::StackName}-bootstrap"
      LifecycleConfiguration:
        Rules:
          - Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7
          - Status: Enabled
            NoncurrentVersionExpirationInDays: 7
      LoggingConfiguration:
        DestinationBucketName: !ImportValue infra-buckets-LogBucket
        LogFilePrefix: !Sub s3_access/bucket=${AWS::StackName}-bootstrap/
      Tags:
        - { Key: Name, Value: !Sub "${AWS::StackName}-bootstrap" }
      VersioningConfiguration:
        Status: Enabled

  NotebookBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketName: !Sub "${AWS::StackName}-notebooks"
      LifecycleConfiguration:
        Rules:
          - Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7
          - Status: Enabled
            NoncurrentVersionExpirationInDays: 7
      LoggingConfiguration:
        DestinationBucketName: !ImportValue infra-buckets-LogBucket
        LogFilePrefix: !Sub s3_access/bucket=${AWS::StackName}-notebooks/
      Tags:
        - { Key: Name, Value: !Sub "${AWS::StackName}-notebooks" }
      VersioningConfiguration:
        Status: Enabled

  WorkspaceBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketName: !Sub "${AWS::StackName}-workspace"
      LifecycleConfiguration:
        Rules:
          - Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7
          - Status: Enabled
            NoncurrentVersionExpirationInDays: 7
      LoggingConfiguration:
        DestinationBucketName: !ImportValue infra-buckets-LogBucket
        LogFilePrefix: !Sub s3_access/bucket=${AWS::StackName}-workspace/
      Tags:
        - { Key: Name, Value: !Sub "${AWS::StackName}-workspace" }
      VersioningConfiguration:
        Status: Enabled

  EmrInstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Path: /
      RoleName: !Sub ${AWS::StackName}-EmrInstanceRole
      Policies:
        - PolicyName: EmrBasicAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:DeleteObject
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:PutObject
                Resource:
                  - !Sub arn:aws:s3:::${AWS::StackName}-bootstrap
                  - !Sub arn:aws:s3:::${AWS::StackName}-bootstrap/*
                  - !Sub arn:aws:s3:::${AWS::StackName}-notebooks
                  - !Sub arn:aws:s3:::${AWS::StackName}-notebooks/*
                  - !Sub arn:aws:s3:::${AWS::StackName}-workspace
                  - !Sub arn:aws:s3:::${AWS::StackName}-workspace/*
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource:
                  - Fn::Sub:
                      - "arn:aws:s3:::${Bucket}/${DeploymentName}/emr/*"
                      - { Bucket: !ImportValue "infra-buckets-LogBucket" }
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Resource:
                  - !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${DeploymentName}/pyspark-runtime

  EmrInstanceRoleProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles:
        - !Ref EmrInstanceRole

  EmrServiceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: elasticmapreduce.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      RoleName: !Sub ${AWS::StackName}-EmrServiceRole
      Policies:
        - PolicyName: AmazonEMRServicePolicy_v2
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Sid: CreateInTaggedNetwork
              Effect: Allow
              Action:
                - ec2:CreateNetworkInterface
                - ec2:RunInstances
                - ec2:CreateFleet
                - ec2:CreateLaunchTemplate
                - ec2:CreateLaunchTemplateVersion
              Resource:
                - !Sub ['arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/${Subnet}', { Subnet: !ImportValue infra-vpc-sn-public-a }]
                - !Sub ['arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/${Subnet}', { Subnet: !ImportValue infra-vpc-sn-public-b }]
                - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:security-group/${MasterSecurityGroup}
                - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:security-group/${WorkerSecurityGroup}
                - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:security-group/${ServiceAccessSecurityGroup}
              # Condition:
              #   StringEquals:
              #     aws:ResourceTag/for-use-with-amazon-emr-managed-policies: 'true'
            - Sid: CreateWithEMRTaggedLaunchTemplate
              Effect: Allow
              Action:
                - ec2:CreateFleet
                - ec2:RunInstances
                - ec2:CreateLaunchTemplateVersion
              Resource: arn:aws:ec2:*:*:launch-template/*
              Condition:
                StringEquals:
                  aws:ResourceTag/DeploymentName: !Ref DeploymentName
            - Sid: CreateEMRTaggedLaunchTemplate
              Effect: Allow
              Action: ec2:CreateLaunchTemplate
              Resource: arn:aws:ec2:*:*:launch-template/*
              Condition:
                StringEquals:
                  aws:RequestTag/DeploymentName: !Ref DeploymentName
            - Sid: CreateEMRTaggedInstancesAndVolumes
              Effect: Allow
              Action:
                - ec2:RunInstances
                - ec2:CreateFleet
              Resource:
                - arn:aws:ec2:*:*:instance/*
                - arn:aws:ec2:*:*:volume/*
              Condition:
                StringEquals:
                  aws:RequestTag/DeploymentName: !Ref DeploymentName
            - Sid: ResourcesToLaunchEC2
              Effect: Allow
              Action:
                - ec2:RunInstances
                - ec2:CreateFleet
                - ec2:CreateLaunchTemplate
                - ec2:CreateLaunchTemplateVersion
              Resource:
                - arn:aws:ec2:*:*:network-interface/*
                - arn:aws:ec2:*::image/ami-*
                - arn:aws:ec2:*:*:key-pair/*
                - arn:aws:ec2:*:*:capacity-reservation/*
                - arn:aws:ec2:*:*:placement-group/EMR_*
                - arn:aws:ec2:*:*:fleet/*
                - arn:aws:ec2:*:*:dedicated-host/*
                - arn:aws:resource-groups:*:*:group/*
            - Sid: ManageEMRTaggedResources
              Effect: Allow
              Action:
                - ec2:CreateLaunchTemplateVersion
                - ec2:DeleteLaunchTemplate
                - ec2:DeleteNetworkInterface
                - ec2:ModifyInstanceAttribute
                - ec2:TerminateInstances
              Resource: "*"
              Condition:
                StringEquals:
                  aws:ResourceTag/DeploymentName: !Ref DeploymentName
            - Sid: ManageTagsOnEMRTaggedResources
              Effect: Allow
              Action:
                - ec2:CreateTags
                - ec2:DeleteTags
              Resource:
                - arn:aws:ec2:*:*:instance/*
                - arn:aws:ec2:*:*:volume/*
                - arn:aws:ec2:*:*:network-interface/*
                - arn:aws:ec2:*:*:launch-template/*
              Condition:
                StringEquals:
                  aws:ResourceTag/DeploymentName: !Ref DeploymentName
            - Sid: CreateNetworkInterfaceNeededForPrivateSubnet
              Effect: Allow
              Action:
                - ec2:CreateNetworkInterface
              Resource:
                - arn:aws:ec2:*:*:network-interface/*
              Condition:
                StringEquals:
                  aws:RequestTag/DeploymentName: !Ref DeploymentName
            - Sid: TagOnCreateTaggedEMRResources
              Effect: Allow
              Action:
                - ec2:CreateTags
              Resource:
                - arn:aws:ec2:*:*:network-interface/*
                - arn:aws:ec2:*:*:instance/*
                - arn:aws:ec2:*:*:volume/*
                - arn:aws:ec2:*:*:launch-template/*
              Condition:
                StringEquals:
                  ec2:CreateAction:
                  - RunInstances
                  - CreateFleet
                  - CreateLaunchTemplate
                  - CreateNetworkInterface
            - Sid: TagPlacementGroups
              Effect: Allow
              Action:
                - ec2:CreateTags
                - ec2:DeleteTags
              Resource:
                - arn:aws:ec2:*:*:placement-group/EMR_*
            - Sid: ListActionsForEC2Resources
              Effect: Allow
              Action:
                - ec2:DescribeAccountAttributes
                - ec2:DescribeCapacityReservations
                - ec2:DescribeDhcpOptions
                - ec2:DescribeInstances
                - ec2:DescribeLaunchTemplates
                - ec2:DescribeNetworkAcls
                - ec2:DescribeNetworkInterfaces
                - ec2:DescribePlacementGroups
                - ec2:DescribeRouteTables
                - ec2:DescribeSecurityGroups
                - ec2:DescribeSubnets
                - ec2:DescribeVolumes
                - ec2:DescribeVolumeStatus
                - ec2:DescribeVpcAttribute
                - ec2:DescribeVpcEndpoints
                - ec2:DescribeVpcs
              Resource: "*"
            # - Sid: CreateDefaultSecurityGroupWithEMRTags
            #   Effect: Allow
            #   Action:
            #   - ec2:CreateSecurityGroup
            #   Resource:
            #   - arn:aws:ec2:*:*:security-group/*
            #   Condition:
            #     StringEquals:
            #       aws:RequestTag/for-use-with-amazon-emr-managed-policies: 'true'
            # - Sid: CreateDefaultSecurityGroupInVPCWithEMRTags
            #   Effect: Allow
            #   Action:
            #   - ec2:CreateSecurityGroup
            #   Resource:
            #   - arn:aws:ec2:*:*:vpc/*
            #   Condition:
            #     StringEquals:
            #       aws:ResourceTag/for-use-with-amazon-emr-managed-policies: 'true'
            # - Sid: TagOnCreateDefaultSecurityGroupWithEMRTags
            #   Effect: Allow
            #   Action:
            #   - ec2:CreateTags
            #   Resource: arn:aws:ec2:*:*:security-group/*
            #   Condition:
            #     StringEquals:
            #       aws:RequestTag/for-use-with-amazon-emr-managed-policies: 'true'
            #       ec2:CreateAction: CreateSecurityGroup
            - Sid: ManageSecurityGroups
              Effect: Allow
              Action:
                - ec2:AuthorizeSecurityGroupEgress
                - ec2:AuthorizeSecurityGroupIngress
                - ec2:RevokeSecurityGroupEgress
                - ec2:RevokeSecurityGroupIngress
              Resource: "*"
              Condition:
                StringEquals:
                  aws:ResourceTag/DeploymentName: !Ref DeploymentName
            - Sid: CreateEMRPlacementGroups
              Effect: Allow
              Action:
                - ec2:CreatePlacementGroup
              Resource: arn:aws:ec2:*:*:placement-group/EMR_*
            - Sid: DeletePlacementGroups
              Effect: Allow
              Action:
                - ec2:DeletePlacementGroup
              Resource: "*"
            - Sid: AutoScaling
              Effect: Allow
              Action:
                - application-autoscaling:DeleteScalingPolicy
                - application-autoscaling:DeregisterScalableTarget
                - application-autoscaling:DescribeScalableTargets
                - application-autoscaling:DescribeScalingPolicies
                - application-autoscaling:PutScalingPolicy
                - application-autoscaling:RegisterScalableTarget
              Resource: "*"
            - Sid: ResourceGroupsForCapacityReservations
              Effect: Allow
              Action:
                - resource-groups:ListGroupResources
              Resource: "*"
            - Sid: AutoScalingCloudWatch
              Effect: Allow
              Action:
                - cloudwatch:PutMetricAlarm
                - cloudwatch:DeleteAlarms
                - cloudwatch:DescribeAlarms
              Resource: arn:aws:cloudwatch:*:*:alarm:*_EMR_Auto_Scaling
            # - Sid: PassRoleForAutoScaling
            #   Effect: Allow
            #   Action: iam:PassRole
            #   Resource: arn:aws:iam::*:role/EMR_AutoScaling_DefaultRole
            #   Condition:
            #     StringLike:
            #       iam:PassedToService: application-autoscaling.amazonaws.com*
            - Sid: PassRoleForEC2
              Effect: Allow
              Action: iam:PassRole
              Resource: !GetAtt EmrInstanceRole.Arn
              Condition:
                StringLike:
                  iam:PassedToService: ec2.amazonaws.com*

  MasterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${AWS::StackName}-master-sg
      GroupDescription: !Sub EMR master node security group for ${DeploymentName} clusters
      Tags:
        - { Key: Name, Value: !Sub "${AWS::StackName}-MasterSecurityGroup" }
      VpcId: !ImportValue infra-vpc-VpcId

  WorkerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${AWS::StackName}-WorkerSecurityGroup
      GroupDescription: !Sub EMR worker node security group for ${DeploymentName} clusters
      Tags:
        - { Key: Name, Value: !Sub "${AWS::StackName}-WorkerSecurityGroup" }
      VpcId: !ImportValue infra-vpc-VpcId

  ServiceAccessSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${AWS::StackName}-ServiceAccessSecurityGroup
      GroupDescription: !Sub EMR service access security group for ${DeploymentName} clusters
      Tags:
        - { Key: Name, Value: !Sub "${AWS::StackName}-ServiceAccessSecurityGroup" }
      VpcId: !ImportValue infra-vpc-VpcId

  PysparkRuntimeImage:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub "${DeploymentName}/pyspark-runtime"
      Tags:
        - { Key: Name, Value: !Sub "${DeploymentName}/pyspark-runtime" }

Outputs:
  EmrInstanceRole:
    Description: The ARN of the IAM role to use for the EMR cluster instances.
    Value: !GetAtt EmrInstanceRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-EmrInstanceRole"

  EmrInstanceRoleProfile:
    Description: The ARN of the IAM role profile to use for the EMR cluster instances.
    Value: !GetAtt EmrInstanceRoleProfile.Arn
    Export:
      Name: !Sub "${AWS::StackName}-EmrInstanceRoleProfile"

  EmrServiceRole:
    Description: The ARN of the IAM role to use for the EMR service.
    Value: !GetAtt EmrServiceRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-EmrServiceRole"

  BootstrapBucket:
    Description: Name of the bucket used for EMR bootstrap action scripts.
    Value: !Ref BootstrapBucket
    Export:
      Name: !Sub "${AWS::StackName}-BootstrapBucket"

  NotebookBucket:
    Description: Name of the bucket used to store Jupyter / Zeppelin notebooks.
    Value: !Ref NotebookBucket
    Export:
      Name: !Sub "${AWS::StackName}-NotebookBucket"

  WorkspaceBucket:
    Description: Name of the bucket used to store (temporary) datasets
    Value: !Ref WorkspaceBucket
    Export:
      Name: !Sub "${AWS::StackName}-WorkspaceBucket"

  MasterSecurityGroup:
    Description: EMR Managed Security Group for Master Nodes
    Value: !GetAtt MasterSecurityGroup.GroupId
    Export:
      Name: !Sub "${AWS::StackName}-MasterSecurityGroup"

  WorkerSecurityGroup:
    Description: EMR Managed Security Group for Worker Nodes
    Value: !GetAtt WorkerSecurityGroup.GroupId
    Export:
      Name: !Sub "${AWS::StackName}-WorkerSecurityGroup"

  ServiceAccessSecurityGroup:
    Description: EMR Managed Security Group for Service Access
    Value: !GetAtt ServiceAccessSecurityGroup.GroupId
    Export:
      Name: !Sub "${AWS::StackName}-ServiceAccessSecurityGroup"
